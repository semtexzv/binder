/* automatically generated by rust-bindgen 0.56.0 */

pub const __BIONIC__: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __bos_level: u32 = 0;
pub const __ANDROID_API_FUTURE__: u32 = 10000;
pub const __ANDROID_API__: u32 = 10000;
pub const __ANDROID_API_G__: u32 = 9;
pub const __ANDROID_API_I__: u32 = 14;
pub const __ANDROID_API_J__: u32 = 16;
pub const __ANDROID_API_J_MR1__: u32 = 17;
pub const __ANDROID_API_J_MR2__: u32 = 18;
pub const __ANDROID_API_K__: u32 = 19;
pub const __ANDROID_API_L__: u32 = 21;
pub const __ANDROID_API_L_MR1__: u32 = 22;
pub const __ANDROID_API_M__: u32 = 23;
pub const __ANDROID_API_N__: u32 = 24;
pub const __ANDROID_API_N_MR1__: u32 = 25;
pub const __ANDROID_API_O__: u32 = 26;
pub const __ANDROID_API_O_MR1__: u32 = 27;
pub const __ANDROID_API_P__: u32 = 28;
pub const __ANDROID_API_Q__: u32 = 29;
pub const __ANDROID_API_R__: u32 = 30;
pub const __NDK_MAJOR__: u32 = 21;
pub const __NDK_MINOR__: u32 = 3;
pub const __NDK_BETA__: u32 = 0;
pub const __NDK_BUILD__: u32 = 6528147;
pub const __NDK_CANARY__: u32 = 0;
pub const INT8_MIN: i32 = -128;
pub const INT8_MAX: u32 = 127;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST8_MAX: u32 = 127;
pub const UINT8_MAX: u32 = 255;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_FAST8_MAX: u32 = 255;
pub const INT16_MIN: i32 = -32768;
pub const INT16_MAX: u32 = 32767;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const UINT16_MAX: u32 = 65535;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const INT32_MIN: i32 = -2147483648;
pub const INT32_MAX: u32 = 2147483647;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const __BITS_PER_LONG: u32 = 32;
pub const __FD_SETSIZE: u32 = 1024;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const B_TYPE_LARGE: u32 = 133;
pub const BINDER_CURRENT_PROTOCOL_VERSION: u32 = 8;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
extern "C" {
    pub fn android_get_application_target_sdk_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn android_get_device_api_level() -> ::std::os::raw::c_int;
}
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __uintptr_t = ::std::os::raw::c_ulong;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_fast16_t = i64;
pub type uint_fast16_t = u64;
pub type int_fast32_t = i64;
pub type uint_fast32_t = u64;
pub type uintmax_t = u64;
pub type intmax_t = i64;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_mode_t = ::std::os::raw::c_ushort;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_ushort;
pub type __kernel_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ushort;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_old_uid_t = __kernel_uid_t;
pub type __kernel_old_gid_t = __kernel_gid_t;
pub type __kernel_size_t = ::std::os::raw::c_uint;
pub type __kernel_ssize_t = ::std::os::raw::c_int;
pub type __kernel_ptrdiff_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_attr_t {
    pub flags: u32,
    pub stack_base: *mut ::std::os::raw::c_void,
    pub stack_size: size_t,
    pub guard_size: size_t,
    pub sched_policy: i32,
    pub sched_priority: i32,
    pub __reserved: [::std::os::raw::c_char; 16usize],
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_barrier_t {
    pub __private: [i64; 4usize],
}
pub type pthread_barrierattr_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_cond_t {
    pub __private: [i32; 12usize],
}
pub type pthread_condattr_t = ::std::os::raw::c_long;
pub type pthread_key_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_mutex_t {
    pub __private: [i32; 10usize],
}
pub type pthread_mutexattr_t = ::std::os::raw::c_long;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_rwlock_t {
    pub __private: [i32; 14usize],
}
pub type pthread_rwlockattr_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_spinlock_t {
    pub __private: i64,
}
pub type pthread_t = ::std::os::raw::c_long;
pub type __gid_t = __kernel_gid32_t;
pub type gid_t = __gid_t;
pub type __uid_t = __kernel_uid32_t;
pub type uid_t = __uid_t;
pub type __pid_t = __kernel_pid_t;
pub type pid_t = __pid_t;
pub type __id_t = u32;
pub type id_t = __id_t;
pub type blkcnt_t = ::std::os::raw::c_ulong;
pub type blksize_t = ::std::os::raw::c_ulong;
pub type caddr_t = __kernel_caddr_t;
pub type clock_t = __kernel_clock_t;
pub type __clockid_t = __kernel_clockid_t;
pub type clockid_t = __clockid_t;
pub type daddr_t = __kernel_daddr_t;
pub type fsblkcnt_t = ::std::os::raw::c_ulong;
pub type fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __mode_t = __kernel_mode_t;
pub type mode_t = __mode_t;
pub type __key_t = __kernel_key_t;
pub type key_t = __key_t;
pub type __ino_t = __kernel_ino_t;
pub type ino_t = __ino_t;
pub type ino64_t = u64;
pub type __nlink_t = u32;
pub type nlink_t = __nlink_t;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type timer_t = __timer_t;
pub type __suseconds_t = __kernel_suseconds_t;
pub type suseconds_t = __suseconds_t;
pub type __useconds_t = u32;
pub type useconds_t = __useconds_t;
pub type dev_t = u64;
pub type __time_t = __kernel_time_t;
pub type time_t = __time_t;
pub type off_t = i64;
pub type loff_t = off_t;
pub type off64_t = loff_t;
pub type __socklen_t = u32;
pub type socklen_t = __socklen_t;
pub type __va_list = __builtin_va_list;
pub type ssize_t = __kernel_ssize_t;
pub type uint_t = ::std::os::raw::c_uint;
pub type uint = ::std::os::raw::c_uint;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type u_int32_t = u32;
pub type u_int16_t = u16;
pub type u_int8_t = u8;
pub type u_int64_t = u64;
pub const BINDER_TYPE_BINDER: ::std::os::raw::c_uint = 1935813253;
pub const BINDER_TYPE_WEAK_BINDER: ::std::os::raw::c_uint = 2002922117;
pub const BINDER_TYPE_HANDLE: ::std::os::raw::c_uint = 1936206469;
pub const BINDER_TYPE_WEAK_HANDLE: ::std::os::raw::c_uint = 2003315333;
pub const BINDER_TYPE_FD: ::std::os::raw::c_uint = 1717840517;
pub const BINDER_TYPE_FDA: ::std::os::raw::c_uint = 1717854597;
pub const BINDER_TYPE_PTR: ::std::os::raw::c_uint = 1886661253;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const FLAT_BINDER_FLAG_PRIORITY_MASK: ::std::os::raw::c_uint = 255;
pub const FLAT_BINDER_FLAG_ACCEPTS_FDS: ::std::os::raw::c_uint = 256;
pub const FLAT_BINDER_FLAG_TXN_SECURITY_CTX: ::std::os::raw::c_uint = 4096;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub type binder_size_t = __u64;
pub type binder_uintptr_t = __u64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct binder_object_header {
    pub type_: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flat_binder_object {
    pub hdr: binder_object_header,
    pub flags: __u32,
    pub __bindgen_anon_1: flat_binder_object__bindgen_ty_1,
    pub cookie: binder_uintptr_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union flat_binder_object__bindgen_ty_1 {
    pub binder: binder_uintptr_t,
    pub handle: __u32,
    _bindgen_union_align: u64,
}
impl Default for flat_binder_object__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Default for flat_binder_object {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct binder_fd_object {
    pub hdr: binder_object_header,
    pub pad_flags: __u32,
    pub __bindgen_anon_1: binder_fd_object__bindgen_ty_1,
    pub cookie: binder_uintptr_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union binder_fd_object__bindgen_ty_1 {
    pub pad_binder: binder_uintptr_t,
    pub fd: __u32,
    _bindgen_union_align: u64,
}
impl Default for binder_fd_object__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Default for binder_fd_object {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct binder_buffer_object {
    pub hdr: binder_object_header,
    pub flags: __u32,
    pub buffer: binder_uintptr_t,
    pub length: binder_size_t,
    pub parent: binder_size_t,
    pub parent_offset: binder_size_t,
}
pub const BINDER_BUFFER_FLAG_HAS_PARENT: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct binder_fd_array_object {
    pub hdr: binder_object_header,
    pub pad: __u32,
    pub num_fds: binder_size_t,
    pub parent: binder_size_t,
    pub parent_offset: binder_size_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct binder_write_read {
    pub write_size: binder_size_t,
    pub write_consumed: binder_size_t,
    pub write_buffer: binder_uintptr_t,
    pub read_size: binder_size_t,
    pub read_consumed: binder_size_t,
    pub read_buffer: binder_uintptr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct binder_version {
    pub protocol_version: __s32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct binder_node_debug_info {
    pub ptr: binder_uintptr_t,
    pub cookie: binder_uintptr_t,
    pub has_strong_ref: __u32,
    pub has_weak_ref: __u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct binder_node_info_for_ref {
    pub handle: __u32,
    pub strong_count: __u32,
    pub weak_count: __u32,
    pub reserved1: __u32,
    pub reserved2: __u32,
    pub reserved3: __u32,
}
pub const TF_ONE_WAY: transaction_flags = 1;
pub const TF_ROOT_OBJECT: transaction_flags = 4;
pub const TF_STATUS_CODE: transaction_flags = 8;
pub const TF_ACCEPT_FDS: transaction_flags = 16;
pub type transaction_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct binder_transaction_data {
    pub target: binder_transaction_data__bindgen_ty_1,
    pub cookie: binder_uintptr_t,
    pub code: __u32,
    pub flags: __u32,
    pub sender_pid: pid_t,
    pub sender_euid: uid_t,
    pub data_size: binder_size_t,
    pub offsets_size: binder_size_t,
    pub data: binder_transaction_data__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union binder_transaction_data__bindgen_ty_1 {
    pub handle: __u32,
    pub ptr: binder_uintptr_t,
    _bindgen_union_align: u64,
}
impl Default for binder_transaction_data__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union binder_transaction_data__bindgen_ty_2 {
    pub ptr: binder_transaction_data__bindgen_ty_2__bindgen_ty_1,
    pub buf: [__u8; 8usize],
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct binder_transaction_data__bindgen_ty_2__bindgen_ty_1 {
    pub buffer: binder_uintptr_t,
    pub offsets: binder_uintptr_t,
}
impl Default for binder_transaction_data__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Default for binder_transaction_data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct binder_transaction_data_secctx {
    pub transaction_data: binder_transaction_data,
    pub secctx: binder_uintptr_t,
}
impl Default for binder_transaction_data_secctx {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct binder_transaction_data_sg {
    pub transaction_data: binder_transaction_data,
    pub buffers_size: binder_size_t,
}
impl Default for binder_transaction_data_sg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct binder_ptr_cookie {
    pub ptr: binder_uintptr_t,
    pub cookie: binder_uintptr_t,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct binder_handle_cookie {
    pub handle: __u32,
    pub cookie: binder_uintptr_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct binder_pri_desc {
    pub priority: __s32,
    pub desc: __u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct binder_pri_ptr_cookie {
    pub priority: __s32,
    pub ptr: binder_uintptr_t,
    pub cookie: binder_uintptr_t,
}
pub const BR_ERROR: binder_driver_return_protocol = 2147774976;
pub const BR_OK: binder_driver_return_protocol = 29185;
pub const BR_TRANSACTION_SEC_CTX: binder_driver_return_protocol = 2152231426;
pub const BR_TRANSACTION: binder_driver_return_protocol = 2151707138;
pub const BR_REPLY: binder_driver_return_protocol = 2151707139;
pub const BR_ACQUIRE_RESULT: binder_driver_return_protocol = 2147774980;
pub const BR_DEAD_REPLY: binder_driver_return_protocol = 29189;
pub const BR_TRANSACTION_COMPLETE: binder_driver_return_protocol = 29190;
pub const BR_INCREFS: binder_driver_return_protocol = 2148561415;
pub const BR_ACQUIRE: binder_driver_return_protocol = 2148561416;
pub const BR_RELEASE: binder_driver_return_protocol = 2148561417;
pub const BR_DECREFS: binder_driver_return_protocol = 2148561418;
pub const BR_ATTEMPT_ACQUIRE: binder_driver_return_protocol = 2149085707;
pub const BR_NOOP: binder_driver_return_protocol = 29196;
pub const BR_SPAWN_LOOPER: binder_driver_return_protocol = 29197;
pub const BR_FINISHED: binder_driver_return_protocol = 29198;
pub const BR_DEAD_BINDER: binder_driver_return_protocol = 2148037135;
pub const BR_CLEAR_DEATH_NOTIFICATION_DONE: binder_driver_return_protocol = 2148037136;
pub const BR_FAILED_REPLY: binder_driver_return_protocol = 29201;
pub type binder_driver_return_protocol = ::std::os::raw::c_uint;
pub const BC_TRANSACTION: binder_driver_command_protocol = 1077961472;
pub const BC_REPLY: binder_driver_command_protocol = 1077961473;
pub const BC_ACQUIRE_RESULT: binder_driver_command_protocol = 1074029314;
pub const BC_FREE_BUFFER: binder_driver_command_protocol = 1074291459;
pub const BC_INCREFS: binder_driver_command_protocol = 1074029316;
pub const BC_ACQUIRE: binder_driver_command_protocol = 1074029317;
pub const BC_RELEASE: binder_driver_command_protocol = 1074029318;
pub const BC_DECREFS: binder_driver_command_protocol = 1074029319;
pub const BC_INCREFS_DONE: binder_driver_command_protocol = 1074815752;
pub const BC_ACQUIRE_DONE: binder_driver_command_protocol = 1074815753;
pub const BC_ATTEMPT_ACQUIRE: binder_driver_command_protocol = 1074291466;
pub const BC_REGISTER_LOOPER: binder_driver_command_protocol = 25355;
pub const BC_ENTER_LOOPER: binder_driver_command_protocol = 25356;
pub const BC_EXIT_LOOPER: binder_driver_command_protocol = 25357;
pub const BC_REQUEST_DEATH_NOTIFICATION: binder_driver_command_protocol = 1074553614;
pub const BC_CLEAR_DEATH_NOTIFICATION: binder_driver_command_protocol = 1074553615;
pub const BC_DEAD_BINDER_DONE: binder_driver_command_protocol = 1074291472;
pub const BC_TRANSACTION_SG: binder_driver_command_protocol = 1078485777;
pub const BC_REPLY_SG: binder_driver_command_protocol = 1078485778;
pub type binder_driver_command_protocol = ::std::os::raw::c_uint;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
